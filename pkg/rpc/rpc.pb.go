// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Version
	Message
	StateMessage
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Version struct {
	SemVer    string `protobuf:"bytes,1,opt,name=sem_ver,json=semVer" json:"sem_ver,omitempty"`
	GitCommit string `protobuf:"bytes,2,opt,name=git_commit,json=gitCommit" json:"git_commit,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Version) GetSemVer() string {
	if m != nil {
		return m.SemVer
	}
	return ""
}

func (m *Version) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

type Message struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Message) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type StateMessage struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *StateMessage) Reset()                    { *m = StateMessage{} }
func (m *StateMessage) String() string            { return proto.CompactTextString(m) }
func (*StateMessage) ProtoMessage()               {}
func (*StateMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StateMessage) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StateMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Version)(nil), "rpc.Version")
	proto.RegisterType((*Message)(nil), "rpc.Message")
	proto.RegisterType((*StateMessage)(nil), "rpc.StateMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GRPC service

type GRPCClient interface {
	GetVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Version, error)
	GetValue(ctx context.Context, in *StateMessage, opts ...grpc.CallOption) (*StateMessage, error)
	PutValue(ctx context.Context, in *StateMessage, opts ...grpc.CallOption) (*StateMessage, error)
	ServerStream(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (GRPC_ServerStreamClient, error)
}

type gRPCClient struct {
	cc *grpc.ClientConn
}

func NewGRPCClient(cc *grpc.ClientConn) GRPCClient {
	return &gRPCClient{cc}
}

func (c *gRPCClient) GetVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := grpc.Invoke(ctx, "/rpc.GRPC/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCClient) GetValue(ctx context.Context, in *StateMessage, opts ...grpc.CallOption) (*StateMessage, error) {
	out := new(StateMessage)
	err := grpc.Invoke(ctx, "/rpc.GRPC/GetValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCClient) PutValue(ctx context.Context, in *StateMessage, opts ...grpc.CallOption) (*StateMessage, error) {
	out := new(StateMessage)
	err := grpc.Invoke(ctx, "/rpc.GRPC/PutValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCClient) ServerStream(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (GRPC_ServerStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GRPC_serviceDesc.Streams[0], c.cc, "/rpc.GRPC/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPC_ServerStreamClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type gRPCServerStreamClient struct {
	grpc.ClientStream
}

func (x *gRPCServerStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GRPC service

type GRPCServer interface {
	GetVersion(context.Context, *google_protobuf.Empty) (*Version, error)
	GetValue(context.Context, *StateMessage) (*StateMessage, error)
	PutValue(context.Context, *StateMessage) (*StateMessage, error)
	ServerStream(*google_protobuf.Empty, GRPC_ServerStreamServer) error
}

func RegisterGRPCServer(s *grpc.Server, srv GRPCServer) {
	s.RegisterService(&_GRPC_serviceDesc, srv)
}

func _GRPC_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.GRPC/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServer).GetVersion(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPC_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.GRPC/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServer).GetValue(ctx, req.(*StateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPC_PutValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServer).PutValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.GRPC/PutValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServer).PutValue(ctx, req.(*StateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPC_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCServer).ServerStream(m, &gRPCServerStreamServer{stream})
}

type GRPC_ServerStreamServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type gRPCServerStreamServer struct {
	grpc.ServerStream
}

func (x *gRPCServerStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _GRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.GRPC",
	HandlerType: (*GRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _GRPC_GetVersion_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _GRPC_GetValue_Handler,
		},
		{
			MethodName: "PutValue",
			Handler:    _GRPC_PutValue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _GRPC_ServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0x4f, 0x8b, 0xda, 0x40,
	0x18, 0x87, 0x1b, 0xad, 0x46, 0x5f, 0xd2, 0xd2, 0x4e, 0xa5, 0x95, 0xb4, 0xd2, 0x90, 0x5e, 0xa4,
	0xad, 0x89, 0x6d, 0xa1, 0x88, 0x37, 0x2b, 0xa2, 0x97, 0x82, 0xa8, 0x78, 0x95, 0x31, 0xbc, 0x0e,
	0x61, 0x4d, 0x26, 0xcc, 0x4c, 0x22, 0x5e, 0xf7, 0x23, 0xec, 0x5e, 0xf6, 0x7b, 0xed, 0x57, 0xd8,
	0x0f, 0xb2, 0x64, 0x92, 0xc0, 0x82, 0x87, 0x3d, 0xec, 0x29, 0xef, 0x9f, 0x27, 0x4f, 0xde, 0xfc,
	0xa0, 0x2d, 0x92, 0xc0, 0x4b, 0x04, 0x57, 0x9c, 0xd4, 0x45, 0x12, 0xd8, 0x9f, 0x19, 0xe7, 0xec,
	0x88, 0xbe, 0x1e, 0xed, 0xd3, 0x83, 0x8f, 0x51, 0xa2, 0xce, 0x05, 0x61, 0x7f, 0x29, 0x97, 0x34,
	0x09, 0x7d, 0x1a, 0xc7, 0x5c, 0x51, 0x15, 0xf2, 0x58, 0x96, 0xdb, 0x9f, 0xfa, 0x11, 0x0c, 0x18,
	0xc6, 0x03, 0x79, 0xa2, 0x8c, 0xa1, 0xf0, 0x79, 0xa2, 0x89, 0x4b, 0xda, 0x9d, 0x80, 0xb9, 0x45,
	0x21, 0x43, 0x1e, 0x93, 0x4f, 0x60, 0x4a, 0x8c, 0x76, 0x19, 0x8a, 0xae, 0xe1, 0x18, 0xfd, 0xf6,
	0xaa, 0x29, 0x31, 0xda, 0xa2, 0x20, 0x3d, 0x00, 0x16, 0xaa, 0x5d, 0xc0, 0xa3, 0x28, 0x54, 0xdd,
	0x9a, 0xde, 0xb5, 0x59, 0xa8, 0xa6, 0x7a, 0xe0, 0x7e, 0x03, 0xf3, 0x3f, 0x4a, 0x49, 0x19, 0x92,
	0x2e, 0x98, 0x51, 0x51, 0x96, 0x8a, 0xaa, 0x75, 0xff, 0x82, 0xb5, 0x56, 0x54, 0x61, 0x45, 0xbe,
	0x83, 0xfa, 0x15, 0x9e, 0x4b, 0x2a, 0x2f, 0x49, 0x07, 0x1a, 0x19, 0x3d, 0xa6, 0x58, 0x7e, 0xa0,
	0x68, 0x7e, 0xdf, 0xd5, 0xe0, 0xf5, 0x7c, 0xb5, 0x9c, 0x92, 0x05, 0xc0, 0x1c, 0x55, 0x75, 0xeb,
	0x47, 0xaf, 0xc8, 0xc0, 0xab, 0x02, 0xf2, 0x66, 0x79, 0x40, 0xb6, 0xe5, 0xe5, 0x41, 0x96, 0x94,
	0xdb, 0xb9, 0xbe, 0x7f, 0xb8, 0xad, 0xbd, 0x25, 0x96, 0x8e, 0x2a, 0x2b, 0xdf, 0x9d, 0x41, 0x2b,
	0x37, 0xe5, 0x7a, 0xf2, 0x5e, 0xf3, 0x4f, 0x2f, 0xb3, 0x2f, 0x47, 0xee, 0x07, 0xed, 0x79, 0xe3,
	0xb6, 0xb4, 0x87, 0xa1, 0x1a, 0x1b, 0xdf, 0x73, 0xcd, 0x32, 0x7d, 0x81, 0x26, 0x49, 0xb5, 0x66,
	0x04, 0xd6, 0x1a, 0x45, 0x86, 0x62, 0xad, 0x04, 0xd2, 0xe8, 0x99, 0x3f, 0xab, 0x54, 0xaf, 0x86,
	0xc6, 0xbf, 0x1f, 0x37, 0x93, 0x3e, 0xf9, 0x0a, 0xbd, 0xc5, 0x66, 0xb3, 0x74, 0x18, 0x55, 0x78,
	0xa2, 0x67, 0xe7, 0xc0, 0x85, 0x93, 0xe7, 0xe5, 0x48, 0x14, 0x59, 0x18, 0xa0, 0xdb, 0x18, 0x8f,
	0x86, 0xa3, 0x5f, 0xfb, 0xa6, 0xd6, 0xfd, 0x79, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x37, 0x27,
	0x66, 0x69, 0x02, 0x00, 0x00,
}
